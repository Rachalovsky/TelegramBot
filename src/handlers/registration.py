import re

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram_patch.fsm import StatesGroup, StateItem, State
from pyrogram_patch.fsm.filter import StateFilter

from pyrogram_patch.router import Router
from src.database.requests import *
from src.tools.filters import is_unregister_user
from sqlalchemy.exc import IntegrityError

reg_router = Router()


class Registration(StatesGroup):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        name (StateItem): –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        login (StateItem): –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    name = StateItem()
    login = StateItem()

    @staticmethod
    def validate_name(value: str) -> bool:
        if len(value) <= 25:
            return True
        return False

    @staticmethod
    def validate_login(value: str) -> bool:
        pattern = r'^[a-zA-Z0-9._]+$'
        if re.match(pattern, value) and len(value) <= 25:
            return True
        return False

    async def on_name_set(self, value: str) -> None:
        if not self.validate_name(value):
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤.")

    async def on_login_set(self, value: str) -> None:
        if not self.validate_login(value):
            raise ValueError(f"–õ–æ–≥–∏–Ω '{value}' –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.\n"
                             f"–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç–æ—á–∫–∏.\n"
                             f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 25.")


@reg_router.on_message(filters.command("start") & filters.private & is_unregister_user)
async def start_reg_handler(client: Client, message: Message, state: State) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –ö–ª–∏–µ–Ω—Ç Pyrogram.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
        state (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    –û–ø–µ—Ä–∞—Ü–∏–∏:
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Registration.name.
    """
    await client.send_message(chat_id=message.chat.id,
                              text='–ü—Ä–∏–≤–µ—Ç! üéâ –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á!\n'
                                   '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. '
                                   '–≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã. üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:')
    await state.set_state(Registration.name)


@reg_router.on_message(filters.private & StateFilter(Registration.name) & is_unregister_user)
async def process_name(client: Client, message: Message, state: State) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Registration.name.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –ö–ª–∏–µ–Ω—Ç Pyrogram.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
        state (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    –û–ø–µ—Ä–∞—Ü–∏–∏:
        - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Registration.login.
    """
    name_valid = False

    while not name_valid:
        try:
            registration_instance = Registration()
            await registration_instance.on_name_set(message.text)
            name_valid = True
        except ValueError as e:
            await message.reply(str(e))
            return

    await state.set_data({'name': message.text})
    await client.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(Registration.login)


@reg_router.on_message(filters.private & StateFilter(Registration.login) & is_unregister_user)
async def process_login(client: Client, message: Message, state: State) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Registration.login.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –ö–ª–∏–µ–Ω—Ç Pyrogram.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
        state (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    –û–ø–µ—Ä–∞—Ü–∏–∏:
        - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    login_valid = False

    while not login_valid:
        try:
            registration_instance = Registration()
            await registration_instance.on_login_set(message.text)
            login_valid = True
        except ValueError as e:
            await message.reply(str(e))
            return

    await state.set_data({'login': message.text})
    data = await state.get_data()
    data['tg_id'] = message.from_user.id
    try:
        await add_user(data)
    except IntegrityError as e:
        await client.send_message(chat_id=message.chat.id,
                                  text='–î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
    else:
        await client.send_message(chat_id=message.chat.id,
                                  text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {data['name']}!\n"
                                       f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.üéâ\n"
                                       f"–í–∞—à –ª–æ–≥–∏–Ω: {data['login']}")
        await state.finish()


@reg_router.on_message(filters.private & is_unregister_user)
async def hint(client: Client, message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –ö–ª–∏–µ–Ω—Ç Pyrogram.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.

    –û–ø–µ—Ä–∞—Ü–∏–∏:
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    await client.send_message(message.from_user.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /start")


